---
schemaVersion: 1
title: Passwordless authentication
id: passkeys
image:
  href: /images/screenshot.jpg
  alt: Registration and authentication form
description: |
  Log in to sites and services without having to enter a password â€“ a Passkeys + WebAuthn implementation for Compute@Edge.
editUrl: https://github.com/doramatadora/compute-rust-passkeys/blob/main/demo/demo-manifest
views:
  endUser:
    mode: frame
    href: /
sessions: true
---

This demo showcases a proof-of-concept implementation of passwordless authentication at the network's edge, using Passkeys and WebAuthn. 

## What are Passkeys? 

[Passkeys](https://passkeys.dev/) are a new type of login credential that allows you to log in to sites and services without having to enter a password â€“ using on-device authentication features like biometric locks. 

Ggenerated using cryptographically secure hardware, they're unique for every website, and resistant to [push-phishing](https://blog.hypr.com/what-are-push-notification-attacks). 

Passkeys generated by the main platform authenticator vendors (Apple, Google, and Microsoft) are automatically synchronized across a user's cloud-connected devices. This makes them a compelling alternative to the ubiquitous "password + 2nd-factor" authentication. 

## What is WebAuthn?

[WebAuthn](https://webauthn.guide/#about-webauthn) is a standard API that allows servers to register and authenticate users using public key cryptography.

Instead of using passwords, it leverages a private-public keypair that is unique for each website: the private key remains on the user's device, while the public key and a randomly generated credential ID are sent to the server. The server can then use that public key to prove a userâ€™s identity.

## What's happening here?

Passkeys and WebAuthn are part of the [FIDO2 authentication framework](https://fidoalliance.org/specifications/):
![FIDO2: WebAuthn + CTAP diagram](https://fidoalliance.org/fido2-project/fido2-graphic-v2/)

This demo imagines a high scale, globally distributed Relying Party server implementation as a **self-contained, originless** [Compute@Edge](https://developer.fastly.com/learning/compute) service written in Rust ðŸ¦€ and compiled to WebAssembly. User data and short-lived challenges are stored in [KV Store](https://www.fastly.com/blog/introducing-object-store-enabling-powerful-applications-at-the-edge), Fastly's edge state system.

Make sure to also check out our video on Fastly Developers Live â€“ [Passkeys: a future without passwords?](https://www.youtube.com/watch?v=bBNMGlC3oXs)
